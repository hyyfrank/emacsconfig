* basic setting
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
;;  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (setq ring-bell-function 'ignore)
#+END_SRC
* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
  #+END_SRC
* posframe
  #+BEGIN_SRC emacs-lisp
    (use-package posframe :ensure t)
  #+END_SRC
* which key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))
  #+END_SRC
* org mode
#+BEGIN_SRC emacs-lisp    
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
  
* Ace window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
    (setq aw-scope 'frame) ;; was global
    (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window))
  #+END_SRC

* Swiper for navigation and search
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
    :ensure t
    )

    (use-package swiper
    :ensure try
    :config
    (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC    

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
  (global-flycheck-mode t))
#+END_SRC

* python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))

#+END_SRC

* autocompleted
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
  ))
#+END_SRC
 
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
  (yas-global-mode 1))
#+END_SRC

* jedi  
